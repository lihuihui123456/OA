<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc 
		http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee 
		http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa 
		http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
    	http://www.springframework.org/schema/aop 
    	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

	<description>Spring公共配置 </description>

	<!-- 定义受环境影响易变的变量 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath:config/base/jdbc.properties</value>
				<!-- 集群中节点配置 -->
				<!--<value>classpath*:/application.cluster.properties</value> -->
				<!-- 本地开发环境配置 -->
				<!--<value>classpath*:/application.local.properties</value> -->
				<!-- 服务器生产环境配置 -->
				<!--<value>file:/var/sshms1.0/application.server.properties</value> -->
			</list>
		</property>
	</bean>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.yonyou">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- ######################################【数据源配置, 使用  阿里巴巴 druid数据库连接池】##################################### -->
	<!-- 以下各property属性值，均在jdbc.properties中定义 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" /> 
		<property name="maxActive" value="${jdbc.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="${jdbc.filters}" />
	</bean>

	<!-- AOP日志管理配置 -->
	<!-- 将日志类注入到bean中 -->
	<!-- <bean id="serverlog" class="com.yonyou.cap.common.log.web.Logs"></bean>
	<aop:config>
		调用日志类
		<aop:aspect id="b" ref="serverlog">
			配置在log包下所有的类在调用之前都会被拦截
			<aop:pointcut id="log" expression="execution(* com.yonyou.cap.*.*.service.*.*(..))" />
			在log包下面所有的类的所有方法被调用之前都调用MyLog中的before方法
			<aop:before pointcut-ref="log" method="before" />
			在log包下面所有的类的所有方法被调用之前都调用MyLog中的after方法
			<aop:after pointcut-ref="log" method="after" />
		</aop:aspect>
	</aop:config> -->

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="com.yonyou" />
		<property name="jpaProperties">
			<!-- <props>
				命名规则 My_NAME->MyName
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				显示SQL语句
				<prop key="hibernate.show_sql">true</prop>
			</props> -->
			<map>
		        <!-- <entry key="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect"/> -->
		        <entry key="hibernate.show_sql" value="true"/>
		        <entry key="hibernate.format_sql" value="true"/>
		        <!-- <entry key="hibernate.hbm2ddl.auto" value="update"/>  -->            
		        <entry key="hibernate.ejb.naming_strategy" value="org.hibernate.cfg.ImprovedNamingStrategy"/>
		    </map>
		</property>
	</bean>

	<!-- JPA Hibernate适配器 -->
	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform">
			<bean factory-method="getDialect" class="org.springside.modules.persistence.Hibernates">
				<constructor-arg ref="dataSource" />
			</bean>
		</property>
	</bean>

	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- JSR303 Validator定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />			
	
	<!-- 单例json对象 -->
    <bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper"/>

	<!-- Spring上下文工具 -->
    <bean id="springContextUtil" class="com.yonyou.cap.common.util.SpringContextUtil" />
    
    <!-- 引入activiti -->
	<!-- 创建一个流程引擎的配置对象 -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<!-- 高并发的UUID id生成器 -->
		<property name="idGenerator">
			<bean class="org.activiti.engine.impl.persistence.StrongUuidGenerator" />
		</property>
		<property name="transactionManager" ref="transactionManager" />
		<!--设置数据库schema的更新方式 -->
		<property name="databaseSchemaUpdate" value="false" />
 		<property name="dbIdentityUsed" value="false" />
		<property name="databaseType" value="mysql" />
		<property name="jobExecutorActivate" value="false" />
		<!-- History 配置 -->
		<property name="history" value="audit" />
		<!-- 资源的自动部署 begin -->
		<!-- <property name="deploymentResources" value="classpath*:/activiti/*.bpmn20.xml" /> -->
		<!-- 资源的自动部署 end -->
		<!--默认的配置情况下部署包含中文的流程文件会导致中文乱码,解决了部署流程时的中文乱码问题 -->
		<property name="activityFontName" value="宋体" />
        <property name="labelFontName" value="宋体" />
		<property name="beans">
			<map>
				<entry key="ITResReqsProcess_CurrentDepartmentApproval" value="DevDepartment" />
				<entry key="ITResReqsProcess_ITDepartmentApprova" value="ITDepartment" />
				<entry key="ITResReqsProcess_OperationMaintenanceDepartmentApproval"
					value="OperationMaintenanceDepartment" />
			</map>
		</property>
	</bean>
	<!-- 创建一个流程引擎bean -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>
	<!-- 工作流仓储服务 -->
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
	<!-- 工作流运行服务 -->
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
	<bean id="formService" factory-bean="processEngine" factory-method="getFormService" />
	<!-- 工作流唯一服务 -->
	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />
	<!-- 工作流任务服务 -->
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
	<!-- 工作流历史数据服务 -->
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
	<!-- 工作流管理服务 -->
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
	<!-- 引入activiti -->
	
	<!-- 集成REST服务需要的bean -->
    <bean id="restResponseFactory" class="org.activiti.rest.service.api.RestResponseFactory" />
    <bean id="contentTypeResolver" class="org.activiti.rest.common.application.DefaultContentTypeResolver" />
    
    <!-- cxf 配置 -->
    <jaxws:endpoint id="greetingService" implementor="com.yonyou.cap.sys.intfc.test.cxf.impl.GreetingServiceImpl" address="/GreetingService" />
</beans>